/*
OUTPUT:
2
3
4
====
begin() called
end() called
0
step() called
end() called
2
step() called
end() called
4
step() called
end() called
====
1
3
5
7
9
11
====
5
4
3
2
1
0
====
3
2
1
====
100
67
34
1
*/

test_fail := proc(message: *i8) void external
test_output := proc(format: *i8, ...) void external

begin := proc() i64
{
    test_output("begin() called\n")
    return 0
}

end := proc() i64
{
    test_output("end() called\n")
    return 4
}

step := proc() i64
{
    test_output("step() called\n")
    return 2
}

main := proc() void
{
    for i 1:<1 test_fail("1:1")

    for i 2:<5 test_output("%d\n", i)

    test_output("====\n")

    for i begin():<=end():step() test_output("%d\n", i)

    test_output("====\n")

    zero := 0
    hundred := 100
    for i zero:<hundred {
        if i % 2 == 0 continue

        test_output("%d\n", i)

        if i >= 10 break
    }

    test_output("====\n")

    for i 5:>=0 {
        test_output("%d\n", i)
        continue
    }

    test_output("====\n")

    for i 3:>0 {
        test_output("%d\n", i)
        continue
    }

    test_output("====\n")

    for i 100:>=0:33 test_output("%d\n", i)
}

